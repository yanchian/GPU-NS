/*
  Copyright Â© Cambridge Numerical Solutions Ltd 2013
*/
#include "boundaryconditions.hpp"

template<BoundaryConditions BCs, bool XDIR, bool downstream>
__global__ void setBoundaryConditionsKernel(Mesh<GPU>::type u) {
  const bool YDIR = !XDIR, upstream = !downstream;

  const int i = blockIdx.x * blockDim.x + threadIdx.x - u.ghostCells();

  if (XDIR && u.exists(i, 0)) {
     real temp[NUMBER_VARIABLES];
     temp[DENSITY] = 1.0;
     temp[XVELOCITY] = -VoD*DCJ;
     temp[YVELOCITY] = 0.0;
     temp[PRESSURE] = 1.0;
     temp[Y] = 0.0;
     primitiveToConservativeInPlace(temp);
     const real r = 0.05;
    for (int k = 0; k < NUMBER_VARIABLES; k++) {
      if (downstream) {

     /*   u(i, -2, k) = (k == YMOMENTUM && BCs == REFLECTIVE ? -1.0 : 1.0) * u(i, 1, k);
        u(i, -1, k) = (k == YMOMENTUM && BCs == REFLECTIVE ? -1.0 : 1.0) * u(i, 0, k); */

      /*  u(i, -2, k) = u(i, 2, k); 
        u(i, -1, k) = u(i, 1, k); 
*/

        u(i, -2, k) = u(i, u.activeNy() - 2, k); 
        u(i, -1, k) = u(i, u.activeNy() - 1, k); 

      } else {
   /*    u(i, u.activeNy() + 1, k) = u(i, u.activeNy() - 2, k);
        u(i, u.activeNy()    , k) = u(i, u.activeNy() - 1, k); 

  //      u(i, u.activeNy() + 1, k) = r * temp[k] + (1.0 - r) * u(i, u.activeNy() - 2, k);
  //      u(i, u.activeNy()    , k) = r * temp[k] + (1.0 - r) * u(i, u.activeNy() - 1, k);  */

     /*    u(i, u.activeNy() + 1, k) = (k == YMOMENTUM && BCs == REFLECTIVE ? -1.0 : 1.0) * u(i, u.activeNy() - 2, k);
         u(i, u.activeNy()    , k) = (k == YMOMENTUM && BCs == REFLECTIVE ? -1.0 : 1.0) * u(i, u.activeNy() - 1, k);  */

      /*   u(i, u.activeNy() + 1, k) = u(i, u.activeNy() -2, k);
         u(i, u.activeNy()    , k) =  u(i, u.activeNy() -1, k); */

         u(i, u.activeNy() + 1, k) = u(i, 1, k);
         u(i, u.activeNy()    , k) =  u(i, 0, k); 

      }
    }
  }

  if (YDIR && u.exists(0, i)) {
      if (downstream) {
       // u(-2, i, k) = (k == XMOMENTUM && BCs == REFLECTIVE ? -1.0 : 1.0) * u(1, i, k);
       // u(-1, i, k) = (k == XMOMENTUM && BCs == REFLECTIVE ? -1.0 : 1.0) * u(0, i, k);

                        real temp[NUMBER_VARIABLES];
			temp[DENSITY] = 1.0;
			temp[XVELOCITY] = -VoD*DCJ;
			temp[YVELOCITY] = 0.0;
			temp[PRESSURE] = 1.0;
			temp[Y] = 0.0;
			primitiveToConservativeInPlace(temp);
			const real r = 0.05;
			for (int k = 0; k < NUMBER_VARIABLES; k++) {
                           u(-2, i, k) = u(1, i, k);
        		   u(-1, i, k) = u(0, i, k); 
	//			u(-2, i, k) = r * temp[k] + (1.0 - r) * u(1, i, k);
	//			u(-1, i, k) = r * temp[k] + (1.0 - r) * u(0, i, k);
                        }

      } else {
			real temp[NUMBER_VARIABLES];
			temp[DENSITY] = 1.0;
			temp[XVELOCITY] = -VoD*DCJ;
			temp[YVELOCITY] = 0;
			temp[PRESSURE] = 1.0;
                      if ( ((i / (u.activeNy() - 1.0)) * y_total) <= thickness ) {
			   temp[Y] = 1.0;
                      } else {
                       temp[Y] = 0.0;
                   }
			primitiveToConservativeInPlace(temp);
			for (int k = 0; k < NUMBER_VARIABLES - 1; k++) {
			        /* u(u.activeNx() + 1, i, k) = temp[k];
				u(u.activeNx() + 0, i, k) = temp[k]; */
           u(u.activeNx() + 1, i, k) = (k == XMOMENTUM && BCs == REFLECTIVE ? -1.0 : 1.0) * u(u.activeNx() - 2, i, k);
           u(u.activeNx() + 0, i, k) = (k == XMOMENTUM && BCs == REFLECTIVE ? -1.0 : 1.0) * u(u.activeNx() - 1, i, k); 
                 
      }
    }
  }
}

template<bool XDIR>
__global__ void setSpecialBoundaryConditionsKernel(Mesh<GPU>::type u) {
  const bool YDIR = !XDIR;

  const int k = blockIdx.x * blockDim.x + threadIdx.x - u.ghostCells();

  if (XDIR && u.exists(k, 0) && k < u.i(XCORNER)) {
    const int j = u.j(YCORNER);
    for (int n = 0; n < 2; n++) {
      u(k, j + n + 1) = u(k, j - n);
      u(k, j + n + 1, YMOMENTUM) = -u(k, j + n + 1, YMOMENTUM);

    }
  }
  else if (!XDIR && u.exists(0, k) && k > u.j(YCORNER)) {
    const int i = u.i(XCORNER);
    for (int n = 0; n < 2; n++) {
      u(i - n - 1, k) = u(i + n, k);
      u(i - n - 1, k, YMOMENTUM) = -u(i - n - 1, k, YMOMENTUM);
    }
  }
}
